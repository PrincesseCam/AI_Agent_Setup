{
  "name": "video-assembly-workflow3",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "video-assembly",
        "options": {}
      },
      "name": "Video Assembly Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1740,
        60
      ],
      "webhookId": "video-assembly",
      "id": "e96842a9-81e6-4ab3-90f8-b5ec19078dc7"
    },
    {
      "parameters": {
        "jsCode": "// Prepare FFmpeg parameters for video creation\nconst contentId = $input.item.json.body.contentId || $input.item.json.contentId;\nconst directories = $input.item.json.body.directories || $input.item.json.directories;\nconst audioFile = $input.item.json.body.audioFile || $input.item.json.audioFile;\nconst imageFiles = $input.item.json.body.imageFiles || $input.item.json.imageFiles;\n\n// Create image list path with forward slashes for Docker\nconst imageListPath = `${directories.main}/images_list.txt`;\n\n// Create output paths with proper formatting for FFmpeg in Docker\nconst outputVideoPath = `${directories.final}/${contentId}_final.mp4`;\nconst subtitlesPath = `${directories.main}/subtitles.srt`;\n\n// Determine video duration based on number of images\nconst numImages = Array.isArray(imageFiles) ? imageFiles.length : 5;\n\n// Default duration if we can't calculate it properly\nlet videoDuration = 60; // seconds\nlet imageDuration = 5; // seconds per image\n\n// Try to calculate image duration based on number of images\nif (numImages > 0) {\n  imageDuration = Math.ceil(videoDuration / numImages);\n}\n\nreturn {\n  contentId,\n  directories,\n  audioFile,\n  imageFiles,\n  ffmpegParams: {\n    imageListPath,\n    audioFile,\n    outputVideoPath,\n    subtitlesPath,\n    imageDuration,\n    youtubeVersion: `${directories.final}/youtube_fb_version.mp4`,\n    instaVersion: `${directories.final}/insta_tiktok_version.mp4`,\n    squareVersion: `${directories.final}/insta_square_version.mp4`,\n    subtitledYoutubeVersion: `${directories.final}/youtube_subtitled.mp4`,\n    subtitledInstaVersion: `${directories.final}/insta_subtitled.mp4`,\n    subtitledSquareVersion: `${directories.final}/square_subtitled.mp4`\n  }\n};"
      },
      "name": "Prepare FFmpeg Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1560,
        60
      ],
      "id": "7b60d862-0c82-4f4d-93bd-2da1cb59f728"
    },
    {
      "parameters": {
        "command": "=# Check the subtitles file exists\nif [ -f \"{{ $json.ffmpegParams.subtitlesPath }}\" ]; then\n  echo \"Subtitles file found at {{ $json.ffmpegParams.subtitlesPath }}\"\nelse\n  echo \"Warning: Subtitles file not found at {{ $json.ffmpegParams.subtitlesPath }}\"\nfi\n\n# Create the image list file for FFmpeg with properly escaped paths\necho \"Preparing image list for FFmpeg\"\n\n# First, remove any existing file\nrm -f \"{{ $json.ffmpegParams.imageListPath }}\"\ntouch \"{{ $json.ffmpegParams.imageListPath }}\"\n\n# Debug: print the input for troubleshooting\necho \"DEBUG: Image files input: {{ $json.imageFiles | json }}\"\n\n# Manually create entries for each image file using the expected pattern\necho \"file '/data/shared/{{ $json.contentId }}/images/image00.png'\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\necho \"duration {{ $json.ffmpegParams.imageDuration }}\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\n\necho \"file '/data/shared/{{ $json.contentId }}/images/image01.png'\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\necho \"duration {{ $json.ffmpegParams.imageDuration }}\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\n\necho \"file '/data/shared/{{ $json.contentId }}/images/image02.png'\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\necho \"duration {{ $json.ffmpegParams.imageDuration }}\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\n\necho \"file '/data/shared/{{ $json.contentId }}/images/image03.png'\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\necho \"duration {{ $json.ffmpegParams.imageDuration }}\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\n\necho \"file '/data/shared/{{ $json.contentId }}/images/image04.png'\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\necho \"duration {{ $json.ffmpegParams.imageDuration }}\" >> \"{{ $json.ffmpegParams.imageListPath }}\"\n\n# Remove the last duration entry (FFmpeg requirement)\nsed -i '$ d' \"{{ $json.ffmpegParams.imageListPath }}\"\n\n# Debug: display the created file content\necho \"----- Created image list file contents: -----\"\ncat \"{{ $json.ffmpegParams.imageListPath }}\"\necho \"-----------------------------------------\"\n\n# Verify file exists and has content\nif [ -s \"{{ $json.ffmpegParams.imageListPath }}\" ]; then\n  echo \"SUCCESS: File created with content\"\nelse\n  echo \"ERROR: File is empty or was not created properly\"\nfi"
      },
      "name": "Create Image List",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1380,
        60
      ],
      "id": "8fe260a6-be2d-4777-849c-79e5e9596d28"
    },
    {
      "parameters": {
        "command": "=# Check that the image list has content\nif [ ! -s \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.imageListPath }}\" ]; then\n  echo \"ERROR: Image list file is empty. Cannot proceed.\"\n  exit 1\nfi\n\n# Create base video with GPU acceleration\n# Use CPU encoding as fallback if GPU fails\necho \"Attempting to create video with GPU acceleration...\"\nffmpeg -y -f concat -safe 0 -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.imageListPath }}\" -i \"{{ $('Prepare FFmpeg Parameters').item.json.directories.audio }}\" -c:v h264_nvenc -preset p1 -crf 18 -c:a aac -b:a 192k -shortest -pix_fmt yuv420p \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\"\n\n# Check if the video was created successfully\nif [ $? -eq 0 ]; then\n  echo \"Successfully created base video at {{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\"\nelse\n  echo \"GPU encoding failed, trying CPU encoding as fallback...\"\n  ffmpeg -y -f concat -safe 0 -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.imageListPath }}\" -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.audioFile }}\" -c:v libx264 -preset medium -crf 23 -c:a aac -b:a 192k -shortest -pix_fmt yuv420p \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\"\n  \n  if [ $? -eq 0 ]; then\n    echo \"Successfully created base video with CPU encoding at {{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\"\n  else\n    echo \"Error creating base video with both GPU and CPU encoding\"\n    exit 1\n  fi\nfi"
      },
      "name": "Create Video with FFmpeg",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1200,
        60
      ],
      "id": "462ad504-09b6-442e-9891-6cfae89ac057"
    },
    {
      "parameters": {
        "command": "=# Create platform-specific versions (aspect ratios)\n# YouTube/Facebook (16:9)\nffmpeg -y -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\" -c:v libx264 -preset medium -crf 23 -c:a copy -vf \"scale=1920:1080\" \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.youtubeVersion }}\"\n\n# Instagram/TikTok (9:16)\nffmpeg -y -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\" -c:v libx264 -preset medium -crf 23 -c:a copy -vf \"scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2:black\" \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.instaVersion }}\"\n\n# Instagram Square (1:1)\nffmpeg -y -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.outputVideoPath }}\" -c:v libx264 -preset medium -crf 23 -c:a copy -vf \"scale=1080:1080:force_original_aspect_ratio=decrease,pad=1080:1080:(ow-iw)/2:(oh-ih)/2:black\" \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.squareVersion }}\"\n\n# Verify the files were created\necho \"Checking final video files:\"\nls -la \"{{ $('Prepare FFmpeg Parameters').item.json.directories.final }}/\""
      },
      "name": "Generate Platform Versions",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1020,
        60
      ],
      "id": "c68f712e-61d7-491a-bd60-7242b1b56c7b"
    },
    {
      "parameters": {
        "command": "=# Check if subtitles file exists\nif [ -f \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitlesPath }}\" ]; then\n  echo \"Subtitle file found, creating versions with burned-in subtitles\"\n  \n  # Define subtitle style - adjust these parameters for better readability\n  SUBTITLE_STYLE=\"FontName=Arial,FontSize=24,PrimaryColour=&H00FFFFFF,OutlineColour=&H00000000,BackColour=&H80000000,BorderStyle=4,Outline=2,Shadow=1,Alignment=2\"\n  \n  # YouTube/Facebook with subtitles (16:9)\n  ffmpeg -y -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.youtubeVersion }}\" -vf \"subtitles={{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitlesPath }}:force_style='${SUBTITLE_STYLE}'\" \\\n    -c:v libx264 -preset medium -crf 23 -c:a copy \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitledYoutubeVersion }}\"\n  \n  # Instagram/TikTok with subtitles (9:16)\n  ffmpeg -y -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.instaVersion }}\" -vf \"subtitles={{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitlesPath }}:force_style='${SUBTITLE_STYLE}'\" \\\n    -c:v libx264 -preset medium -crf 23 -c:a copy \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitledInstaVersion }}\"\n  \n  # Square with subtitles (1:1)\n  ffmpeg -y -i \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.squareVersion }}\" -vf \"subtitles={{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitlesPath }}:force_style='${SUBTITLE_STYLE}'\" \\\n    -c:v libx264 -preset medium -crf 23 -c:a copy \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitledSquareVersion }}\"\n  \n  echo \"Created all versions with subtitles\"\nelse\n  echo \"Subtitles file not found at {{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitlesPath }}\"\n  echo \"Using versions without subtitles\"\n  \n  # Just copy the files to maintain consistent naming\n  cp \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.youtubeVersion }}\" \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitledYoutubeVersion }}\"\n  cp \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.instaVersion }}\" \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitledInstaVersion }}\"\n  cp \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.squareVersion }}\" \"{{ $('Prepare FFmpeg Parameters').item.json.ffmpegParams.subtitledSquareVersion }}\"\nfi\n\n# Verify the files were created\necho \"Checking final video files:\"\nls -la \"{{ $('Prepare FFmpeg Parameters').item.json.directories.final }}/\""
      },
      "name": "Create Subtitled Versions",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -840,
        60
      ],
      "id": "9b95bbb1-a1c4-4f41-af21-94d208594da0"
    },
    {
      "parameters": {
        "filePath": "={{ $('Prepare FFmpeg Parameters').item.json.directories.main + \"/script.json\" }}"
      },
      "name": "Read Script JSON",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -660,
        60
      ],
      "id": "67122be4-0899-499c-bf72-70d196dc6674"
    },
    {
      "parameters": {
        "jsCode": "// Parse the script JSON to get metadata\nlet scriptData;\ntry {\n  const fileContent = $binary.data.toString('utf8');\n  scriptData = JSON.parse(fileContent);\n} catch (e) {\n  // Default values if we can't parse the script\n  scriptData = {\n    title: $input.item.json.contentId,\n    hashtags: ['#content', '#video'],\n    call_to_action: 'Like and subscribe!'\n  };\n}\n\n// Format platform-specific content\nconst title = scriptData.title || \"Video Content\";\nconst hashtags = Array.isArray(scriptData.hashtags) ? scriptData.hashtags.join(' ') : \"#content #video\";\nconst callToAction = scriptData.call_to_action || scriptData.callToAction || \"Like and subscribe!\";\n\n// YouTube description (longer, more detailed)\nconst youtubeDescription = `${title}\\n\\n${scriptData.script || ''}\\n\\n${callToAction}\\n\\n${hashtags}`;\n\n// Instagram/TikTok (shorter, emoji-rich)\nconst instaDescription = `✨ ${title} ✨\\n\\n${callToAction}\\n\\n${hashtags}`;\n\n// Facebook (medium length)\nconst fbDescription = `${title}\\n\\n${callToAction}\\n\\n${hashtags}`;\n\nreturn {\n  ...$input.item.json,\n  platformContent: {\n    youtube: {\n      title: title,\n      description: youtubeDescription,\n      tags: Array.isArray(scriptData.hashtags) ? scriptData.hashtags.map(tag => tag.replace('#', '')) : [\"content\", \"video\"]\n    },\n    instagram: {\n      caption: instaDescription\n    },\n    tiktok: {\n      caption: instaDescription\n    },\n    facebook: {\n      caption: fbDescription\n    }\n  },\n  videoFiles: {\n    youtube: $('Prepare FFmpeg Parameters').first().json.ffmpegParams.youtubeVersion,\n    instagram: $('Prepare FFmpeg Parameters').first().json.ffmpegParams.subtitledInstaVersion,\n    tiktok: $('Prepare FFmpeg Parameters').first().json.ffmpegParams.subtitledInstaVersion,\n    facebook: $('Prepare FFmpeg Parameters').first().json.ffmpegParams.youtubeVersion,\n    square: $('Prepare FFmpeg Parameters').first().json.ffmpegParams.subtitledSquareVersion,\n    original: $('Prepare FFmpeg Parameters').first().json.ffmpegParams.outputVideoPath\n  }\n};"
      },
      "name": "Format Platform Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -480,
        60
      ],
      "id": "88620aa3-9e25-4b5c-8040-fc550dcb51ba"
    },
    {
      "parameters": {
        "jsCode": "// Prepare the platform metadata for saving\nconst platformMetadata = {\n  contentId: $input.item.json.contentId,\n  directories: $input.item.json.directories,\n  platformContent: $input.item.json.platformContent,\n  videoFiles: $input.item.json.videoFiles,\n  timestamp: new Date().toISOString()\n};\n\n// Convert to JSON string with nice formatting\nconst jsonString = JSON.stringify(platformMetadata, null, 2);\n\n// Convert to Buffer for binary data\nconst buffer = Buffer.from(jsonString, 'utf-8');\n\nreturn [{\n  json: $input.item.json,\n  binary: {\n    data: {\n      data: buffer,\n      mimeType: 'application/json',\n      fileName: 'platform_metadata.json'\n    }\n  }\n}];"
      },
      "name": "Prepare Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -300,
        60
      ],
      "id": "aa72995f-3495-4273-9915-8c2857094db3"
    },
    {
      "parameters": {
        "fileName": "={{ $('Video Assembly Webhook').item.json.body.directories.main }}/platform_metadata.json",
        "options": {}
      },
      "name": "Save Platform Metadata",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        -120,
        60
      ],
      "id": "2b318f37-cd38-4e09-816c-b701351dda55"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://host.docker.internal:5678/webhook-test/publishing",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contentId\": \"{{ $('Prepare FFmpeg Parameters').item.json.contentId }}\",\n  \"directories\": {{JSON.stringify($('Prepare FFmpeg Parameters').item.json.directories)}},\n  \"platformContent\": {{JSON.stringify($json.platformContent)}},\n  \"videoFiles\": {{JSON.stringify($json.videoFiles)}}\n}",
        "options": {}
      },
      "name": "Trigger Publishing Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        80,
        0
      ],
      "id": "96d6683a-0a51-4450-a104-6385d79e4a02"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        100,
        220
      ],
      "id": "3393503b-b232-40f7-bb26-51d24189fe21"
    },
    {
      "parameters": {
        "command": "=# Create a completion marker file to indicate assembly is done\necho '{\"contentId\": \"{{ $('Video Assembly Webhook').item.json.body.contentId }}\", \"assemblyComplete\": true, \"timestamp\": \"'$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")'\" }' > \"{{ $('Video Assembly Webhook').item.json.body.directories.main }}/assembly_complete.json\"\n\n# List the final directory to verify the created files\nls -la \"{{ $('Video Assembly Webhook').item.json.body.directories.final }}/\""
      },
      "name": "Create Completion Marker",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -120,
        -100
      ],
      "id": "0a4b7cac-5c78-474f-8615-3aee5e2d742f"
    }
  ],
  "pinData": {
    "Video Assembly Webhook": [
      {
        "json": {
          "headers": {
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "content-type": "application/json",
            "user-agent": "axios/1.7.4",
            "content-length": "658",
            "accept-encoding": "gzip, compress, deflate, br",
            "host": "host.docker.internal:5678",
            "connection": "keep-alive"
          },
          "params": {},
          "query": {},
          "body": {
            "contentId": "video_1741064777985",
            "directories": {
              "main": "/data/shared/video_1741064777985/main",
              "audio": "/data/shared/video_1741064777985/audio",
              "images": "/data/shared/video_1741064777985/images",
              "video": "/data/shared/video_1741064777985/video",
              "final": "/data/shared/video_1741064777985/final"
            },
            "audioFile": "/data/shared/video_1741064777985/audio/narration.mp3",
            "imageFiles": [
              "/data/shared/video_1741064777985/images\\image00.png",
              "/data/shared/video_1741064777985/images\\image01.png",
              "/data/shared/video_1741064777985/images\\image02.png",
              "/data/shared/video_1741064777985/images\\image03.png",
              "/data/shared/video_1741064777985/images\\image04.png"
            ]
          },
          "webhookUrl": "http://localhost:5678/webhook-test/video-assembly",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "Video Assembly Webhook": {
      "main": [
        [
          {
            "node": "Prepare FFmpeg Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare FFmpeg Parameters": {
      "main": [
        [
          {
            "node": "Create Image List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Image List": {
      "main": [
        [
          {
            "node": "Create Video with FFmpeg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video with FFmpeg": {
      "main": [
        [
          {
            "node": "Generate Platform Versions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Platform Versions": {
      "main": [
        [
          {
            "node": "Create Subtitled Versions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Subtitled Versions": {
      "main": [
        [
          {
            "node": "Read Script JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Script JSON": {
      "main": [
        [
          {
            "node": "Format Platform Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Platform Content": {
      "main": [
        [
          {
            "node": "Prepare Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Metadata": {
      "main": [
        [
          {
            "node": "Save Platform Metadata",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Completion Marker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Platform Metadata": {
      "main": [
        [
          {
            "node": "Trigger Publishing Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Completion Marker": {
      "main": [
        [
          {
            "node": "Trigger Publishing Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "48bd71ab-79b2-4878-9939-b41ba6bfd919",
  "meta": {
    "instanceId": "4e52379637041ff10799c16d4fe1175e0d88d75b24685ea7cde857d7eef2b827"
  },
  "id": "jDW6YmPZy9Cl2evV",
  "tags": []
}